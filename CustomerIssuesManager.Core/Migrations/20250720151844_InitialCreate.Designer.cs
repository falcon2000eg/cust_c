// <auto-generated />
using System;
using CustomerIssuesManager.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerIssuesManager.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250720151844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UploadedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<int>("PerformedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerformedByName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("PerformedById");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionsTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DebtAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastMeterReading")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastReadingDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SolvedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SolvedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SolvedById");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Correspondence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaseSequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("YearlySequenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Correspondences");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PerformanceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceNumber")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "مدير النظام",
                            PerformanceNumber = 1,
                            Position = "Admin"
                        });
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.IssueCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("IssueCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "فواتير",
                            ColorCode = "#FF6347",
                            Description = "مشاكل متعلقة بالفواتير والمديونية"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "صيانة",
                            ColorCode = "#4682B4",
                            Description = "طلبات صيانة أو مشاكل فنية"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "شكاوى",
                            ColorCode = "#FFD700",
                            Description = "شكاوى عامة من العملاء"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "استفسارات",
                            ColorCode = "#90EE90",
                            Description = "استفسارات عامة"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "أخرى",
                            ColorCode = "#D3D3D3",
                            Description = "تصنيف عام للمشاكل الأخرى"
                        });
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Attachment", b =>
                {
                    b.HasOne("CustomerIssuesManager.Core.Models.Case", "Case")
                        .WithMany("Attachments")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerIssuesManager.Core.Models.Employee", "UploadedBy")
                        .WithMany("Attachments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.AuditLog", b =>
                {
                    b.HasOne("CustomerIssuesManager.Core.Models.Case", "Case")
                        .WithMany("AuditLogs")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerIssuesManager.Core.Models.Employee", "PerformedBy")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Case", b =>
                {
                    b.HasOne("CustomerIssuesManager.Core.Models.IssueCategory", "Category")
                        .WithMany("Cases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerIssuesManager.Core.Models.Employee", "CreatedBy")
                        .WithMany("CreatedCases")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerIssuesManager.Core.Models.Employee", "ModifiedBy")
                        .WithMany("ModifiedCases")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CustomerIssuesManager.Core.Models.Employee", "SolvedBy")
                        .WithMany("SolvedCases")
                        .HasForeignKey("SolvedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SolvedBy");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Correspondence", b =>
                {
                    b.HasOne("CustomerIssuesManager.Core.Models.Case", "Case")
                        .WithMany("Correspondences")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerIssuesManager.Core.Models.Employee", "CreatedBy")
                        .WithMany("Correspondences")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Case", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Correspondences");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.Employee", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Correspondences");

                    b.Navigation("CreatedCases");

                    b.Navigation("ModifiedCases");

                    b.Navigation("SolvedCases");
                });

            modelBuilder.Entity("CustomerIssuesManager.Core.Models.IssueCategory", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
